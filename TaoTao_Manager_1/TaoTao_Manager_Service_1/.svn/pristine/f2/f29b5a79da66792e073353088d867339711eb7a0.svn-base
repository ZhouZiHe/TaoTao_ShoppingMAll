package org.taotao.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.ObjectMessage;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.command.ActiveMQTopic;
import org.omg.CORBA.LongHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.stereotype.Service;
import org.taotao.common.pojo.EasyUIDataGridResult;
import org.taotao.common.pojo.TaotaoResult;
import org.taotao.common.utils.IDUtils;
import org.taotao.dao.TbItemDescMapper;
import org.taotao.dao.TbItemMapper;
import org.taotao.pojo.TbItem;
import org.taotao.pojo.TbItemDesc;
import org.taotao.pojo.TbItemExample;
import org.taotao.service.ItemService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
/**
 * <p>Title: ItemServiceImpl</p>
 * <p>Description: ItemService接口实现类</p>
 * <p>Email: zhouzihe@hotmail.com</p> 
 * @author	Zack
 * @date	2015年12月12日
 * @version 1.0
 */
@Service
public class ItemServiceImpl implements ItemService {
	
	@Autowired//在这里注入一个itemMapper
	private TbItemMapper tbItemMapper;
	@Autowired//在这里注入一个商品详细信息的tbItemDescMapper
	private TbItemDescMapper tbItemDescMapper;
	@Autowired//注入一个jmsTemplate对象
	private JmsTemplate jmsTemplate;
	@Autowired//注入一个发送消息的目的地
	private ActiveMQTopic activeMQTopic;
	
//1.0	通过id查找商品
	@Override
	public TbItem findItemById(long itemId){
		TbItem item=tbItemMapper.selectByPrimaryKey(itemId);
		return item;
	}
	
//	2.0	分页查询商品列表
@Override	
public EasyUIDataGridResult getItemList(int page,int rows){
//	2.1 分页处理
		PageHelper.startPage(page, rows);
//	2.2 执行查询
		TbItemExample tbItemExample=new TbItemExample();
		List<TbItem> list=tbItemMapper.selectByExample(tbItemExample);
//	2.3获取分页信息
		PageInfo<TbItem> pageInfo=new PageInfo<>(list);
//	2.4 初始化一个包装类的对象
		EasyUIDataGridResult	 easyUIDataGridResult=new EasyUIDataGridResult();
//	2.5向包装类中添加数据
		easyUIDataGridResult.setRows(list);
		easyUIDataGridResult.setTotal(easyUIDataGridResult.getTotal());
//	2.6将分页的到的包装类对象结果返回
		return easyUIDataGridResult;
	}
	
//	3.0添加商品的业务操作
@Override
public TaotaoResult addItem(final TbItem tbItem,final TbItemDesc tbItemDesc){
//	3.1初始化一个结果包装类
	TaotaoResult taotaoResult=new TaotaoResult();
//	3.2 生成商品的id
	final long itemId=IDUtils.genItemId();
	tbItem.setId(itemId);
//	3.3 添加商品的状态和创建时间
	//1-正常，2-下架，3-删除
	tbItem.setStatus((byte) 1);
	Date date=new Date();
	tbItem.setCreated(date);
	tbItem.setUpdated(date);
// 3.4 将商品信息插入数据
	tbItemMapper.insert(tbItem);
//	3.5 对商品详细信息进行操作
	tbItemDesc.setItemId(itemId);
	tbItemDesc.setCreated(date);
	tbItemDesc.setUpdated(date);
// 3.6 将商品详细信息插入数据库中
	tbItemDescMapper.insert(tbItemDesc);
	
//	3.7向activeMQ中发送添加商品的topic消息
	jmsTemplate.send(activeMQTopic,new MessageCreator() {
		@Override
		public Message createMessage(Session session) throws JMSException {
//			TextMessage message=session.createTextMessage(itemId+"");
//			拼接需要加入到消息中的数据
			HashMap<String, Object> map=new HashMap<>();
			map.put("tbItem", tbItem);
			map.put("tbItemDesc", tbItemDesc);
//			将信息添加到消息中
			ObjectMessage message=session.createObjectMessage();
			message.setObject(map);
//			返回消息
			return message;
		}
	});
	
//返回成功结果提示
	return taotaoResult.ok();
}
	
}
